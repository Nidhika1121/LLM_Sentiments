# -*- coding: utf-8 -*-
"""Sentiment_Of_Unknown_Words.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pa9rqFHir8FRSF0RHcea8cakMPybyTYO
"""

# Mount your google drive in google colab
from google.colab import drive
drive.mount('/content/drive')

import gensim

# Load Google's pre-trained Word2Vec model.
model =  gensim.models.KeyedVectors.load_word2vec_format('/content/drive/MyDrive/GoogleNews-vectors-negative300.bin.gz', binary=True)

vocabulary = model.wv.vocab
len(vocabulary)

model

similar_words = model.most_similar("sad", topn=20)
for w in similar_words:
  print(w)

similar_words = model.most_similar("happy", topn=20)
for w in similar_words:
  print(w)

similar_words = model.most_similar("good", topn=20)
for w in similar_words:
  print(w)

similar_words = model.most_similar("bad", topn=20)
for w in similar_words:
  print(w)

similar_words = model.most_similar("neutral", topn=20)
for w in similar_words:
  print(w)

sentiment_test = "nice"
similar_words = model.most_similar(sentiment_test, topn=10)
 

for w in similar_words:
  print(w[0])

similar_words = model.most_similar("good", topn=20)
for w in similar_words:
  print(w[0], ",")
  
 
max = 0
i = 0 
index = 0

for w in similar_words:
  similarity = model.wv.similarity(sentiment_test, w[0])
  if max <= similarity:
    max =  similarity
    index = i
  print("similarity between: ",  w[0],  " and ", sentiment_test, " is ",  similarity)
  i = i + 1 

print("Maximum Orietation Towards", similar_words[index][0], " " , max)

sentiment_test = "nice"
similar_words = model.most_similar(sentiment_test, topn=10)
 

for w in similar_words:
  print(w[0])

similar_words = model.most_similar("happy", topn=20)
for w in similar_words:
  print(w[0], ",")
  
 
max = 0
i = 0 
index = 0

for w in similar_words:
  similarity = model.wv.similarity(sentiment_test, w[0])
  if max <= similarity:
    max =  similarity
    index = i
  print("similarity between: ",  w[0],  " and ", sentiment_test, " is ",  similarity)
  i = i + 1 

print("Maximum Orietation Towards", similar_words[index][0], " " , max)

sentiment_test = "nice"
similar_words = model.most_similar(sentiment_test, topn=10)
 

for w in similar_words:
  print(w[0])

similar_words = model.most_similar("sad", topn=20)
for w in similar_words:
  print(w[0], ",")
  
 
max = 0
i = 0 
index = 0

for w in similar_words:
  similarity = model.wv.similarity(sentiment_test, w[0])
  if max <= similarity:
    max =  similarity
    index = i
  print("similarity between: ",  w[0],  " and ", sentiment_test, " is ",  similarity)
  i = i + 1 

print("Maximum Orietation Towards", similar_words[index][0], " " , max)

sentiment_test = "nice"
similar_words = model.most_similar(sentiment_test, topn=10)
 

for w in similar_words:
  print(w[0])

similar_words = model.most_similar("bad", topn=20)
for w in similar_words:
  print(w[0], ",")
  
 
max = 0
i = 0 
index = 0

for w in similar_words:
  similarity = model.wv.similarity(sentiment_test, w[0])
  if max <= similarity:
    max =  similarity
    index = i
  print("similarity between: ",  w[0],  " and ", sentiment_test, " is ",  similarity)
  i = i + 1 

print("Maximum Orietation Towards", similar_words[index][0], " " , max)

sentiment_test = "nice"
similar_words = model.most_similar(sentiment_test, topn=10)
 

for w in similar_words:
  print(w[0])

similar_words = model.most_similar("neutral", topn=20)
for w in similar_words:
  print(w[0], ",")
  
 
max = 0
i = 0 
index = 0

for w in similar_words:
  similarity = model.wv.similarity(sentiment_test, w[0])
  if max <= similarity:
    max =  similarity
    index = i
  print("similarity between: ",  w[0],  " and ", sentiment_test, " is ",  similarity)
  i = i + 1 

print("Maximum Orietation Towards", similar_words[index][0], " " , max)

model.wv.similarity("bad","good")